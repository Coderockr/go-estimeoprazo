package estimeoprazo

import (
    "testing"
    "sort"
    "sync"
)


var testsPercentile = []ForecastResult{
    {5, 7},
    {10, 7},
    {15, 7},
    {20, 8},
    {25, 8},
    {30, 8},
    {35, 9},
    {40, 9},
    {45, 9},
    {50, 10},
    {55, 10},
    {60, 10},
    {65, 10},
    {70, 11},
    {75, 11},
    {80, 11},
    {85, 12},
    {90, 12},
    {95, 12},
    {100, 13},
}

var configTest = Config{200, 220, 1, 2, 30, 40, 1000};

var numbers sort.Float64Slice

func TestTotalStories(t *testing.T) {
    result := TotalStories(configTest)
    expected := configTest.MinTasks * configTest.MinSplitTasks
    if result <  expected {
        t.Error(
                "expected", expected,
                "got", result,
            )
    }
}

func TestEndWeekStories(t *testing.T) {
    totalStories := TotalStories(configTest)
    result := EndWeekStories(totalStories, configTest)
    expected := totalStories - configTest.MaxTasksDone
    if result < expected {
        t.Error(
                "expected", expected,
                "got", result,
            )
    }
}

func TestWeeksToZero(t *testing.T) {
    var wg sync.WaitGroup
    var weeks sort.Float64Slice

    wg.Add(1)
    result := WeeksToZero(configTest, &wg, &weeks)
    expected := 13.0
    if result > expected {
        t.Error(
                "expected", expected,
                "got", result,
            )
    }
}

func TestPercentile(t *testing.T) {
    numbers = []float64{10.0,9.0,10.0,7.0,9.0,11.0,7.0,11.0,8.0,10.0,7.0,8.0,11.0,11.0,9.0,9.0,11.0,12.0,8.0,8.0,10.0,8.0,7.0,11.0,13.0,12.0,6.0,9.0,9.0,9.0,10.0,8.0,8.0,11.0,9.0,12.0,9.0,7.0,9.0,12.0,11.0,8.0,9.0,9.0,10.0,9.0,8.0,8.0,12.0,8.0,12.0,7.0,9.0,11.0,10.0,12.0,11.0,10.0,7.0,11.0,12.0,11.0,9.0,10.0,12.0,7.0,10.0,7.0,11.0,8.0,8.0,9.0,7.0,9.0,8.0,10.0,10.0,7.0,8.0,12.0,9.0,12.0,10.0,7.0,12.0,11.0,7.0,9.0,9.0,11.0,9.0,9.0,13.0,8.0,10.0,12.0,11.0,9.0,11.0,10.0,9.0,12.0,12.0,12.0,12.0,10.0,11.0,6.0,12.0,7.0,12.0,10.0,7.0,13.0,7.0,10.0,9.0,10.0,10.0,11.0,7.0,7.0,11.0,8.0,11.0,7.0,10.0,7.0,10.0,8.0,12.0,11.0,8.0,9.0,8.0,10.0,8.0,10.0,13.0,10.0,13.0,12.0,12.0,11.0,10.0,12.0,9.0,10.0,7.0,8.0,10.0,11.0,13.0,8.0,7.0,11.0,11.0,10.0,10.0,8.0,10.0,8.0,9.0,9.0,12.0,7.0,11.0,9.0,11.0,11.0,7.0,9.0,10.0,11.0,8.0,6.0,11.0,12.0,7.0,12.0,12.0,7.0,9.0,11.0,9.0,12.0,11.0,7.0,12.0,9.0,11.0,11.0,9.0,9.0,10.0,11.0,10.0,10.0,9.0,12.0,10.0,10.0,12.0,8.0,10.0,12.0,7.0,9.0,12.0,8.0,11.0,8.0,8.0,8.0,9.0,11.0,11.0,12.0,9.0,6.0,12.0,7.0,9.0,7.0,9.0,11.0,10.0,7.0,11.0,11.0,12.0,7.0,9.0,7.0,11.0,9.0,8.0,8.0,7.0,7.0,10.0,10.0,12.0,11.0,11.0,10.0,10.0,8.0,12.0,7.0,11.0,9.0,7.0,10.0,8.0,8.0,8.0,9.0,11.0,9.0,9.0,11.0,7.0,9.0,11.0,9.0,8.0,11.0,9.0,9.0,9.0,8.0,10.0,9.0,10.0,10.0,9.0,13.0,9.0,7.0,7.0,7.0,11.0,13.0,7.0,9.0,11.0,12.0,12.0,11.0,10.0,7.0,11.0,11.0,9.0,7.0,7.0,11.0,7.0,10.0,7.0,8.0,8.0,10.0,12.0,12.0,6.0,7.0,8.0,10.0,13.0,12.0,9.0,7.0,9.0,8.0,10.0,9.0,10.0,9.0,7.0,12.0,10.0,12.0,10.0,11.0,7.0,12.0,10.0,10.0,11.0,11.0,11.0,12.0,10.0,10.0,10.0,10.0,8.0,8.0,9.0,12.0,12.0,10.0,10.0,11.0,7.0,7.0,9.0,8.0,7.0,11.0,12.0,13.0,12.0,12.0,8.0,11.0,7.0,11.0,8.0,12.0,10.0,11.0,11.0,7.0,9.0,8.0,13.0,8.0,10.0,7.0,9.0,7.0,11.0,11.0,9.0,7.0,7.0,8.0,8.0,12.0,11.0,11.0,12.0,13.0,9.0,11.0,13.0,8.0,7.0,11.0,9.0,8.0,9.0,12.0,7.0,12.0,10.0,9.0,9.0,8.0,12.0,10.0,7.0,9.0,7.0,7.0,11.0,10.0,11.0,7.0,8.0,11.0,9.0,8.0,8.0,12.0,9.0,7.0,10.0,9.0,10.0,7.0,7.0,6.0,8.0,7.0,7.0,10.0,9.0,12.0,9.0,12.0,7.0,12.0,8.0,11.0,12.0,10.0,9.0,10.0,10.0,10.0,9.0,12.0,7.0,6.0,6.0,9.0,10.0,9.0,11.0,9.0,8.0,7.0,10.0,10.0,13.0,13.0,10.0,10.0,9.0,8.0,9.0,9.0,11.0,10.0,8.0,11.0,7.0,7.0,11.0,10.0,9.0,12.0,10.0,12.0,7.0,8.0,8.0,12.0,11.0,9.0,11.0,12.0,10.0,8.0,11.0,10.0,12.0,12.0,8.0,10.0,12.0,11.0,10.0,8.0,9.0,9.0,11}
    sort.Sort(numbers)
    l := len(numbers)

    for _, pair := range testsPercentile {
        result := Percentile(numbers, l, pair.Likelihood)
        if result != pair.Weeks {
            t.Error(
                "For", pair.Likelihood,
                "expected", pair.Weeks,
                "got", result,
            )
        }
    }
}

func TestForecast(t *testing.T) {
    result := Forecast(configTest)
    if result[19].Weeks != 13 && result[19].Weeks != 14 {
        t.Error(
                "expected", 13,
                "got", result[19].Weeks,
            )
    }
}
